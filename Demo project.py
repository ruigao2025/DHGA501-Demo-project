# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F-gUfUWn3IoK75uIYQ9YuRyBG0ZJ5yMw
"""

!pip -q install opencv-python-headless scikit-image pillow

import os, cv2, numpy as np
from skimage import exposure
from PIL import Image
from google.colab import files

print("请选择要上传的地图图片文件（jpg/png/tif 等）：")
uploaded = files.upload()  # 弹出选择框
if not uploaded:
    raise RuntimeError("未选择文件。")

INPUT = list(uploaded.keys())[0]
print("已上传：", INPUT)

with open(INPUT, "rb") as f:
    data = np.frombuffer(f.read(), dtype=np.uint8)
img = cv2.imdecode(data, cv2.IMREAD_COLOR)
if img is None:
    raise RuntimeError("读取失败，请检查文件格式")

WARPED = "map_warped.png"
DENOTE = "map_nowm.png"
TONED  = "map_tone.png"
UPSCALED = "map_upscaled.png"
FINAL = "map_final.png"

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
blur = cv2.GaussianBlur(gray, (5,5), 0)
edges = cv2.Canny(blur, 60, 180)
contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
contours = sorted(contours, key=cv2.contourArea, reverse=True)

def order_pts(pts):
    s = pts.sum(axis=1)
    diff = np.diff(pts, axis=1)
    tl = pts[np.argmin(s)]
    br = pts[np.argmax(s)]
    tr = pts[np.argmin(diff)]
    bl = pts[np.argmax(diff)]
    return np.array([tl,tr,br,bl], dtype="float32")

warped = img.copy()
if contours:
    peri = cv2.arcLength(contours[0], True)
    approx = cv2.approxPolyDP(contours[0], 0.02*peri, True)
    if len(approx) == 4:
        pts = order_pts(approx.reshape(4,2).astype("float32"))
        wA = np.linalg.norm(pts[2]-pts[3]); wB = np.linalg.norm(pts[1]-pts[0])
        hA = np.linalg.norm(pts[1]-pts[2]); hB = np.linalg.norm(pts[0]-pts[3])
        maxW = int(max(wA, wB)); maxH = int(max(hA, hB))
        M = cv2.getPerspectiveTransform(pts, np.array([[0,0],[maxW-1,0],[maxW-1,maxH-1],[0,maxH-1]], dtype="float32"))
        warped = cv2.warpPerspective(img, M, (maxW, maxH), flags=cv2.INTER_CUBIC)

cv2.imwrite(WARPED, warped)

# —— 初步去水印（亮水印掩膜 + 修复） ——
lab = cv2.cvtColor(warped, cv2.COLOR_BGR2LAB)
L, A, B = cv2.split(lab)
mask = cv2.inRange(L, 220, 255)
kernel = np.ones((3,3), np.uint8)
mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel, iterations=1)
inpainted = cv2.inpaint(warped, mask, 3, cv2.INPAINT_TELEA)
cv2.imwrite(DENOTE, inpainted)

# —— 色阶与轻锐化（不改信息，仅增强可读性） ——
rgb = cv2.cvtColor(inpainted, cv2.COLOR_BGR2RGB)
p2, p98 = np.percentile(rgb, (2, 98))
rescale = exposure.rescale_intensity(rgb, in_range=(p2, p98))
gamma = exposure.adjust_gamma(rescale, 1.05)
Image.fromarray(gamma).save(TONED)

# —— 简易放大（若需 Real-ESRGAN 可另装） ——
img4 = cv2.imread(TONED)
h, w = img4.shape[:2]
up = cv2.resize(img4, (w*2, h*2), interpolation=cv2.INTER_CUBIC)
blur = cv2.GaussianBlur(up, (0,0), 1.0)
sharp = cv2.addWeighted(up, 1.18, blur, -0.18, 0)
cv2.imwrite(UPSCALED, sharp)

# —— 轻去噪 + 最终锐化 ——
fin = cv2.fastNlMeansDenoisingColored(sharp, None, 3, 3, 7, 15)
blur2 = cv2.GaussianBlur(fin, (0,0), 0.7)
final = cv2.addWeighted(fin, 1.12, blur2, -0.12, 0)
cv2.imwrite(FINAL, final)

from google.colab import files as colab_files
print("处理完成，开始下载最终图：", FINAL)
colab_files.download(FINAL)

# 直接在Colab中提取第五大队名单并生成CSV
from google.colab import files
import pandas as pd

# 第五大队的原始名单（直接从您提供的文本复制）
raw_data = """
邱企藩 湖南江华
钟畦  湖南宝庆
钟烈谟 江西修水
黄锦辉 广西桂林
黄第洪 湖南平江
黄鹤  湖南湘阴
杨炳章 湖南未阳
冯得实 湖南道县
史书元 湖南醚陵
义明道 湖南永明
李振唐 湖南嘉禾
李铁军 广东梅县
温忠  湖南醴陵
唐金元 湖南醴陵
张镇  湖南常德
张良莘 江西吉安
谭孝哲 湖南安仁
王祈  湖南衡阳
张风威 江西南昌
李昭良 湖南醴陵
张本仁 湖南醴陵
杨光文 湖南醴陵
王钟毓 四川叙水
陈家炳 广东文昌
罗钦  湖南宝庆
袁荣  云南呈黄
胡屏曼 湖南嘉禾
彭兆麟 江西萍乡
王邦御 江西安福
"""

# 处理原始数据
def process_raw_data(data):
    lines = data.strip().split('\n')
    processed = []
    for line in lines:
        # 分割姓名和籍贯（处理可能的多个空格）
        parts = line.split(maxsplit=1)
        if len(parts) >= 2:
            name = parts[0].strip()
            native_place = parts[1].strip()
            # 保留原始内容，不做任何修改
            processed.append([name, native_place])
    return processed

# 创建数据列表
data = process_raw_data(raw_data)

# 创建DataFrame
df = pd.DataFrame(data, columns=['姓名', '籍贯'])

# 显示前5行验证
print("提取的第五大队名单（前5行）：")
print(df.head())

# 保存为CSV文件
csv_filename = '黄埔军校第一期第五大队名单.csv'
df.to_csv(csv_filename, index=False, encoding='utf-8-sig')
print(f"\n已生成CSV文件：{csv_filename}")

# 下载文件
files.download(csv_filename)
print("文件下载中... 请在浏览器中确认保存")

import pandas as pd
import numpy as np

# 原始数据
data = {
    '姓名': ['邱企藩', '钟畦', '钟烈谟', '黄锦辉', '黄第洪', '黄鹤', '杨炳章', '冯得实', '史书元',
            '义明道', '李振唐', '李铁军', '温忠', '唐金元', '张镇', '张良莘', '谭孝哲', '王祈',
            '张风威', '李昭良', '张本仁', '杨光文', '王钟毓', '陈家炳', '罗钦', '袁荣', '胡屏曼',
            '彭兆麟', '王邦御'],
    '籍贯': ['湖南江华', '湖南宝庆', '江西修水', '广西桂林', '湖南平江', '湖南湘阴', '湖南未阳',
            '湖南道县', '湖南醚陵', '湖南永明', '湖南嘉禾', '广东梅县', '湖南醴陵', '湖南醴陵',
            '湖南常德', '江西吉安', '湖南安仁', '湖南衡阳', '江西南昌', '湖南醴陵', '湖南醴陵',
            '湖南醴陵', '四川叙水', '广东文昌', '湖南宝庆', '云南呈黄', '湖南嘉禾', '江西萍乡',
            '江西安福']
}

# 创建DataFrame
df = pd.DataFrame(data)

# 地名修正映射表
corrections = {
    '未阳': '耒阳',
    '醚陵': '醴陵',
    '叙水': '叙永',
    '呈黄': '呈贡',
    '宝庆': '邵阳'  # 宝庆是邵阳的旧称
}

# 分离省份和县份
def split_origin(origin):
    # 识别省份（前两个字）
    province = origin[:2]

    # 县份（剩余部分）
    county = origin[2:]

    # 应用地名修正
    if county in corrections:
        county = corrections[county]

    return province, county

# 应用分离函数
df[['籍贯省份', '籍贯县份']] = df['籍贯'].apply(
    lambda x: pd.Series(split_origin(x))
)

# 删除原始的籍贯列
df_cleaned = df[['姓名', '籍贯省份', '籍贯县份']]

# 显示清洗后的数据
print("清洗后的数据预览：")
print(df_cleaned.head(10))

# 保存为CSV文件
file_name = '黄埔军校第一期第五大队名单（清洗后）.csv'
df_cleaned.to_csv(file_name, index=False, encoding='utf-8-sig')

print(f"\n文件已保存为: {file_name}")

# 显示文件内容预览
print("\n文件内容预览：")
with open(file_name, 'r', encoding='utf-8-sig') as f:
    for i, line in enumerate(f):
        if i < 10:  # 显示前10行
            print(line.strip())
        else:
            break

# 提供下载链接（在Colab中）
from google.colab import files
files.download(file_name)

print("\n文件已生成并准备下载！")

import pandas as pd
import geopandas as gpd
import folium
from folium.plugins import StripePattern
import json
import requests
from collections import Counter
import os

# ---------------------- 1. 数据加载与清洗 ----------------------
# 从上传的文件内容创建DataFrame
data = {
    '姓名': ['邱企藩', '钟畦', '钟烈谟', '黄锦辉', '黄第洪', '黄鹤', '杨炳章', '冯得实', '史书元',
            '义明道', '李振唐', '李铁军', '温忠', '唐金元', '张镇', '张良莘', '谭孝哲', '王祈',
            '张风威', '李昭良', '张本仁', '杨光文', '王钟毓', '陈家炳', '罗钦', '袁荣', '胡屏曼',
            '彭兆麟', '王邦御'],
    '籍贯': ['湖南江华', '湖南宝庆', '江西修水', '广西桂林', '湖南平江', '湖南湘阴', '湖南未阳',
            '湖南道县', '湖南醚陵', '湖南永明', '湖南嘉禾', '广东梅县', '湖南醴陵', '湖南醴陵',
            '湖南常德', '江西吉安', '湖南安仁', '湖南衡阳', '江西南昌', '湖南醴陵', '湖南醴陵',
            '湖南醴陵', '四川叙水', '广东文昌', '湖南宝庆', '云南呈黄', '湖南嘉禾', '江西萍乡',
            '江西安福']
}

df = pd.DataFrame(data)

# 地名修正映射
corrections = {
    '未阳': '耒阳',
    '醚陵': '醴陵',
    '叙水': '叙永',
    '呈黄': '呈贡',
    '宝庆': '邵阳'  # 历史名称，现为邵阳
}

# 分离省份和县份，并修正地名
def process_origin(origin):
    # 识别省份（前两个字）
    province = origin[:2]

    # 县份（剩余部分）
    county = origin[2:]

    # 应用地名修正
    if county in corrections:
        county = corrections[county]

    return province, county

# 应用处理函数
df[['省份', '县份']] = df['籍贯'].apply(lambda x: pd.Series(process_origin(x)))

# 统计各省学生数量
province_counts = df['省份'].value_counts().reset_index()
province_counts.columns = ['省份', '学生数量']
total_students = province_counts['学生数量'].sum()
province_counts['百分比'] = (province_counts['学生数量'] / total_students * 100).round(1)

print("各省学生数量统计：")
print(province_counts)

# ---------------------- 2. 获取中国地图GeoJSON数据 ----------------------
def get_china_geojson():
    """获取中国省级行政区划GeoJSON数据"""
    url = "https://geo.datav.aliyun.com/areas_v3/bound/100000_full.json"

    try:
        response = requests.get(url)
        response.raise_for_status()
        china_geojson = response.json()
        print("成功下载中国地图GeoJSON数据")
        return china_geojson
    except Exception as e:
        print(f"下载地图数据失败: {e}")
        # 使用备用方案 - 创建一个简单的中国地图轮廓
        return create_simple_china_geojson()

def create_simple_china_geojson():
    """创建简单的中国地图轮廓（备用方案）"""
    simple_geojson = {
        "type": "FeatureCollection",
        "features": [
            {
                "type": "Feature",
                "properties": {"name": "湖南", "adcode": "430000"},
                "geometry": {"type": "Polygon", "coordinates": [[[109, 25], [114, 25], [114, 30], [109, 30], [109, 25]]]}
            },
            {
                "type": "Feature",
                "properties": {"name": "江西", "adcode": "360000"},
                "geometry": {"type": "Polygon", "coordinates": [[[114, 25], [118, 25], [118, 30], [114, 30], [114, 25]]]}
            },
            {
                "type": "Feature",
                "properties": {"name": "广东", "adcode": "440000"},
                "geometry": {"type": "Polygon", "coordinates": [[[109, 21], [117, 21], [117, 25], [109, 25], [109, 21]]]}
            },
            {
                "type": "Feature",
                "properties": {"name": "广西", "adcode": "450000"},
                "geometry": {"type": "Polygon", "coordinates": [[[104, 21], [112, 21], [112, 26], [104, 26], [104, 21]]]}
            },
            {
                "type": "Feature",
                "properties": {"name": "四川", "adcode": "510000"},
                "geometry": {"type": "Polygon", "coordinates": [[[97, 26], [110, 26], [110, 34], [97, 34], [97, 26]]]}
            },
            {
                "type": "Feature",
                "properties": {"name": "云南", "adcode": "530000"},
                "geometry": {"type": "Polygon", "coordinates": [[[97, 21], [106, 21], [106, 29], [97, 29], [97, 21]]]}
            }
        ]
    }
    print("使用简化版中国地图数据")
    return simple_geojson

# 获取地图数据
china_geojson = get_china_geojson()

# ---------------------- 3. 准备地图数据 ----------------------
# 创建省份名称映射（标准名称 -> 简称）
name_mapping = {
    '湖南省': '湖南', '江西省': '江西', '广东省': '广东', '广西壮族自治区': '广西',
    '四川省': '四川', '云南省': '云南', '湖北省': '湖北', '河南省': '河南',
    '河北省': '河北', '山东省': '山东', '山西省': '山西', '陕西省': '陕西',
    '安徽省': '安徽', '江苏省': '江苏', '浙江省': '浙江', '福建省': '福建',
    '贵州省': '贵州', '辽宁省': '辽宁', '吉林省': '吉林', '黑龙江省': '黑龙江',
    '甘肃省': '甘肃', '青海省': '青海', '海南省': '海南', '台湾省': '台湾',
    '北京市': '北京', '天津市': '天津', '上海市': '上海', '重庆市': '重庆',
    '内蒙古自治区': '内蒙古', '新疆维吾尔自治区': '新疆', '宁夏回族自治区': '宁夏',
    '西藏自治区': '西藏', '香港特别行政区': '香港', '澳门特别行政区': '澳门'
}

# 为每个省份添加学生数量数据
for feature in china_geojson['features']:
    prop = feature['properties']
    full_name = prop.get('name', '')

    # 转换为简称
    province_short = name_mapping.get(full_name, full_name)
    if province_short in province_counts['省份'].values:
        student_data = province_counts[province_counts['省份'] == province_short].iloc[0]
        prop['学生数量'] = int(student_data['学生数量'])
        prop['百分比'] = float(student_data['百分比'])
        prop['学生列表'] = ', '.join(df[df['省份'] == province_short]['姓名'].tolist())
    else:
        prop['学生数量'] = 0
        prop['百分比'] = 0.0
        prop['学生列表'] = '无'

# ---------------------- 4. 创建交互式地图 ----------------------
# 创建地图对象，以中国为中心
m = folium.Map(
    location=[35, 105],  # 中国中心坐标
    zoom_start=4,
    tiles='CartoDB positron',  # 简洁的地图样式
    control_scale=True
)

# 颜色函数：根据学生数量设置颜色
def get_color(students_count):
    if students_count == 0:
        return '#f0f0f0'  # 灰色，无数据
    elif students_count == 1:
        return '#c6e9ff'  # 浅蓝色
    elif students_count <= 3:
        return '#7bc8f6'  # 蓝色
    elif students_count <= 5:
        return '#2e8bcc'  # 中蓝色
    else:
        return '#1a5a8c'   # 深蓝色

# 样式函数：设置每个区域的样式
def style_function(feature):
    students_count = feature['properties']['学生数量']
    return {
        'fillColor': get_color(students_count),
        'color': 'white',  # 边界颜色
        'weight': 1,       # 边界宽度
        'fillOpacity': 0.7, # 填充透明度
    }

# 高亮样式函数（鼠标悬停时）
def highlight_function(feature):
    return {
        'fillColor': '#ffeb3b',  # 高亮黄色
        'color': 'black',
        'weight': 3,
        'fillOpacity': 0.8,
    }

# 添加GeoJSON图层
geojson_layer = folium.GeoJson(
    china_geojson,
    style_function=style_function,
    highlight_function=highlight_function,
    tooltip=folium.GeoJsonTooltip(
        fields=['name', '学生数量', '百分比', '学生列表'],
        aliases=['省份:', '学生数量:', '占比(%):', '学生名单:'],
        localize=True,
        sticky=False,
        labels=True,
        style="""
            background-color: #F0EFEF;
            border: 2px solid black;
            border-radius: 3px;
            box-shadow: 3px 3px 3px rgba(0, 0, 0, 0.2);
            font-family: Arial, sans-serif;
            font-size: 14px;
            padding: 10px;
        """
    ),
    popup=folium.GeoJsonPopup(
        fields=['name', '学生数量', '百分比', '学生列表'],
        aliases=['省份:', '学生数量:', '占比(%):', '学生名单:'],
        localize=True,
        labels=True,
        style="font-size: 12px;"
    ),
    name="黄埔军校学生分布"
).add_to(m)

# ---------------------- 5. 添加图例 ----------------------
# 创建图例HTML
legend_html = '''
<div style="position: fixed;
     top: 10px; left: 50px; width: 200px; height: auto;
     background-color: white; border:2px solid grey; z-index:9999;
     font-size:14px; padding: 10px; border-radius: 5px;">

     <p style="margin:0; font-weight:bold; text-align:center;">
     黄埔军校第一期第五大队<br>学生籍贯分布</p>
     <p style="margin:5px 0; font-size:12px;">颜色深浅表示学生数量</p>

     <div style="display: flex; align-items: center; margin:5px 0;">
         <div style="background-color:#c6e9ff; width:20px; height:20px; margin-right:5px;"></div>
         <span>1人</span>
     </div>
     <div style="display: flex; align-items: center; margin:5px 0;">
         <div style="background-color:#7bc8f6; width:20px; height:20px; margin-right:5px;"></div>
         <span>2-3人</span>
     </div>
     <div style="display: flex; align-items: center; margin:5px 0;">
         <div style="background-color:#2e8bcc; width:20px; height:20px; margin-right:5px;"></div>
         <span>4-5人</span>
     </div>
     <div style="display: flex; align-items: center; margin:5px 0;">
         <div style="background-color:#1a5a8c; width:20px; height:20px; margin-right:5px;"></div>
         <span>5人以上</span>
     </div>
     <div style="display: flex; align-items: center; margin:5px 0;">
         <div style="background-color:#f0f0f0; width:20px; height:20px; margin-right:5px; border:1px solid #ccc;"></div>
         <span>无数据</span>
     </div>

     <hr style="margin:10px 0;">
     <p style="margin:5px 0; font-size:12px; text-align:center;">
     总计: ''' + str(total_students) + '''名学生</p>
     <p style="margin:0; font-size:10px; color:#666; text-align:center;">
     鼠标悬停查看详情</p>
</div>
'''

m.get_root().html.add_child(folium.Element(legend_html))

# ---------------------- 6. 添加其他控件 ----------------------
# 添加图层控制
folium.LayerControl().add_to(m)

# 添加比例尺
folium.plugins.MeasureControl().add_to(m)

# ---------------------- 7. 保存为HTML文件 ----------------------
output_file = "黄埔军校第一期第五大队学生籍贯分布地图.html"
m.save(output_file)

print(f"\n地图已生成并保存为: {output_file}")
print("各省详细统计:")
print(province_counts.to_string(index=False))

# ---------------------- 8. 在Colab中显示地图 ----------------------
# 在Colab中显示地图
display(m)

# 提供下载链接
from google.colab import files
files.download(output_file)

print("\nHTML文件已准备好下载！")

